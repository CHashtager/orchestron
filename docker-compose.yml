version: '3.8'

services:
  # Orchestron Service
  orchestron:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: orchestron
    ports:
      - "8080:8080"
    environment:
      - ORCHESTRON_DATABASE_HOST=postgres
      - ORCHESTRON_DATABASE_USER=orchestron
      - ORCHESTRON_DATABASE_PASSWORD=orchestron_password
      - ORCHESTRON_DATABASE_DBNAME=orchestron
      - ORCHESTRON_BROKER_TYPE=kafka
      - ORCHESTRON_BROKER_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ORCHESTRON_API_API_KEY=your_api_key_here
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped
    networks:
      - orchestron-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: orchestron-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=orchestron
      - POSTGRES_PASSWORD=orchestron_password
      - POSTGRES_DB=orchestron
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/sql/schema.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - orchestron-network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: orchestron-zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    restart: unless-stopped
    networks:
      - orchestron-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: orchestron-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - orchestron-network

  # Kafka UI (optional - for easier management)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: orchestron-kafka-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=orchestron-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    restart: unless-stopped
    networks:
      - orchestron-network

  # RabbitMQ (optional - if you want to support RabbitMQ as well)
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: orchestron-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - orchestron-network

  # Prometheus (optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: orchestron-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - orchestron-network

  # Grafana (optional - for monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: orchestron-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - orchestron-network

volumes:
  postgres-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:

networks:
  orchestron-network:
    driver: bridge